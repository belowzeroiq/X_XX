name: Process Recovery ROM

on:
  workflow_dispatch:
    inputs:
      rom_url:
        description: 'URL of the recovery ROM (.zip) to download'
        required: true
        type: string

jobs:
  process-rom:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install dependencies (aria2, unzip, android-sdk-libsparse-utils, file, e2fsprogs)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip android-sdk-libsparse-utils file e2fsprogs git build-essential liblz4-dev zlib1g-dev
          # Install erofs-utils if available, or build from source
          if ! sudo apt-get install -y erofs-utils; then
            echo "erofs-utils not found in repository, building from source..."
            git clone https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git
            cd erofs-utils
            ./autogen.sh
            ./configure
            make
            sudo make install
            cd ..
          fi
          # Build android-tools for lpunpack
          echo "Building android-tools for lpunpack..."
          git clone https://android.googlesource.com/platform/system/core
          cd core/libsparse
          gcc -o lpunpack -Iinclude lpunpack.c sparse.c sparse_crc32.c sparse_read.c -lz
          sudo mv lpunpack /usr/local/bin/
          cd ../..

      # Download ROM using aria2
      - name: Download ROM with aria2
        run: |
          URL="${{ github.event.inputs.rom_url || 'https://example.com/recovery-rom.zip' }}"
          FILENAME=$(basename "$URL")
          aria2c \
            --dir="${{ github.workspace }}" \
            --out="$FILENAME" \
            --split=5 \
            --max-concurrent-downloads=5 \
            --max-connection-per-server=5 \
            --min-split-size=5M \
            --allow-overwrite=true \
            "$URL"

      # Unpack the downloaded zip file
      - name: Unpack ROM zip
        run: |
          FILENAME=$(basename "${{ github.event.inputs.rom_url || 'https://example.com/recovery-rom.zip' }}")
          unzip "${{ github.workspace }}/$FILENAME" -d "${{ github.workspace }}/rom_contents"

      # Combine super.img fragments if they exist
      - name: Combine super.img fragments
        run: |
          if ls "${{ github.workspace }}/rom_contents/images/super.img."* >/dev/null 2>&1; then
            echo "Found super.img fragments, combining them..."
            cat "${{ github.workspace }}/rom_contents/images/super.img."* > "${{ github.workspace }}/rom_contents/super.img"
            echo "Combined fragments into super.img"
          else
            echo "No super.img fragments found in the ROM"
          fi

      # Check for super.img and detect if it's a sparse image
      - name: Check and process super.img
        run: |
          if [ -f "${{ github.workspace }}/rom_contents/super.img" ]; then
            echo "Found super.img, checking if it's a sparse image..."
            if file "${{ github.workspace }}/rom_contents/super.img" | grep -q "Android sparse image"; then
              echo "super.img is a sparse image, converting to raw image..."
              simg2img "${{ github.workspace }}/rom_contents/super.img" "${{ github.workspace }}/rom_contents/super_raw.img"
              echo "super.img converted to super_raw.img"
            else
              echo "super.img is not a sparse image, copying as super_raw.img"
              cp "${{ github.workspace }}/rom_contents/super.img" "${{ github.workspace }}/rom_contents/super_raw.img"
            fi
          else
            echo "No single super.img or fragments found in the ROM"
          fi

      # Extract super_raw.img contents to a specific folder if it exists
      - name: Extract super_raw.img contents
        run: |
          if [ -f "${{ github.workspace }}/rom_contents/super_raw.img" ]; then
            echo "Found super_raw.img, checking filesystem type..."
            mkdir -p "${{ github.workspace }}/rom_contents/super_extracted"
            if file "${{ github.workspace }}/rom_contents/super_raw.img" | grep -q "EROFS filesystem"; then
              echo "super_raw.img is an EROFS filesystem, extracting contents..."
              fsck.erofs --extract="${{ github.workspace }}/rom_contents/super_extracted" "${{ github.workspace }}/rom_contents/super_raw.img"
              echo "Extracted super_raw.img contents to rom_contents/super_extracted"
            elif file "${{ github.workspace }}/rom_contents/super_raw.img" | grep -q "ext4 filesystem"; then
              echo "super_raw.img is an ext4 filesystem, extracting contents..."
              debugfs -R "rdump / ${{ github.workspace }}/rom_contents/super_extracted" "${{ github.workspace }}/rom_contents/super_raw.img"
              echo "Extracted super_raw.img contents to rom_contents/super_extracted"
            else
              echo "super_raw.img is not an EROFS or ext4 filesystem, attempting super partition extraction..."
              mkdir -p "${{ github.workspace }}/rom_contents/super_extracted/partitions"
              lpunpack "${{ github.workspace }}/rom_contents/super_raw.img" "${{ github.workspace }}/rom_contents/super_extracted/partitions"
              echo "Extracted super partition images to rom_contents/super_extracted/partitions"
              # Attempt to extract each partition if EROFS or ext4
              for img in "${{ github.workspace }}/rom_contents/super_extracted/partitions"/*.img; do
                if [ -f "$img" ]; then
                  partition_name=$(basename "$img" .img)
                  mkdir -p "${{ github.workspace }}/rom_contents/super_extracted/$partition_name"
                  if file "$img" | grep -q "EROFS filesystem"; then
                    echo "Extracting EROFS partition $partition_name..."
                    fsck.erofs --extract="${{ github.workspace }}/rom_contents/super_extracted/$partition_name" "$img"
                    echo "Extracted $partition_name to rom_contents/super_extracted/$partition_name"
                  elif file "$img" | grep -q "ext4 filesystem"; then
                    echo "Extracting ext4 partition $partition_name..."
                    debugfs -R "rdump / ${{ github.workspace }}/rom_contents/super_extracted/$partition_name" "$img"
                    echo "Extracted $partition_name to rom_contents/super_extracted/$partition_name"
                  else
                    echo "Partition $partition_name is not EROFS or ext4, skipping extraction"
                  fi
                fi
              done
            fi
          else
            echo "No super_raw.img found, skipping extraction"
          fi

      # List extracted files to verify
      - name: List extracted files
        run: ls -lhR "${{ github.workspace }}/rom_contents"
